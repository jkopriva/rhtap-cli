{{- $currentNamespace := .Release.Namespace }}
{{- with $pgsql := .Values.infrastructure.pgsqlService }}
{{- range $inst := $pgsql.instances }}
{{- if $inst.enabled }}
{{- $secretName := printf "%s-%s" $inst.name $pgsql.secretName }}
{{- $serviceName := printf "%s-%s" $inst.name $pgsql.service.name }}
{{- $podName := printf "%s-%s" $inst.name $pgsql.podName }}
{{- $pvcName := printf "%s-pgsql-data" $inst.name }}
{{- $secret := lookup "v1" "Secret" $inst.namespace $secretName }}
{{- $password := randAlphaNum 16 }}
{{- if $secret }}
  {{- $password = index $secret.data "password" | b64dec }}
{{- end }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ $pvcName }}
  namespace: {{ $inst.namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ $pgsql.storageSize }}
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ $secretName }}
  namespace: {{ $inst.namespace }}
stringData:
  dbname: {{ $inst.name }}
  host: {{ printf "%s.%s.svc" $serviceName $inst.namespace }}
  user: {{ $inst.name }}
  port: "{{ $pgsql.service.port | toString }}"
  password: {{ $password | quote }}
{{- if ne $currentNamespace $inst.namespace }}
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ $secretName }}
  namespace: {{ $currentNamespace }}
stringData:
  password: {{ $password | quote }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $serviceName }}
  namespace: {{ $inst.namespace }}
spec:
  type: {{ $pgsql.service.type }}
  ports:
    - name: data
      port: {{ $pgsql.service.port }}
      targetPort: {{ $pgsql.service.port }}
  selector:
    app: {{ $podName }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $podName }}
  namespace: {{ $inst.namespace }}
  annotations:
    app.kubernetes.io/part-of: tssc
spec:
  selector:
    matchLabels: 
      app: {{ $podName }}
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ $podName }}
        phase: reference
    spec:
      volumes:
        - name: pgsql-storage
          persistentVolumeClaim:
            claimName: {{ $pvcName }}
      securityContext:
        runAsNonRoot: true
      containers:
      - name: {{ $pgsql.podName }}
        image: '{{ $pgsql.image.repository }}{{ $pgsql.image.name }}:{{ $pgsql.image.tag }}'
        imagePullPolicy: {{ $pgsql.image.pullPolicy }}
        env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              name: {{ $secretName }}
              key: user
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $secretName }}
              key: password
        - name: POSTGRESQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: {{ $secretName }}
              key: dbname
        volumeMounts:
          - name: pgsql-storage
            mountPath: "/var/lib/pgsql/data"
        ports:
          - containerPort: {{ $pgsql.service.port }}
        resources:
          limits:
            cpu: {{ $pgsql.resources.limits.cpu }}
            memory: {{ $pgsql.resources.limits.memory }}
          requests:
            cpu: {{ $pgsql.resources.requests.cpu }}
            memory: {{ $pgsql.resources.requests.memory }}
        readinessProbe:
          tcpSocket:
            port: {{ $pgsql.service.port }}
          initialDelaySeconds: 15
          periodSeconds: 20
{{- end }}
{{- end }}
{{- end }}
